#!/usr/bin/env node

/**
 * Complete Storage Wiper - Remove ALL records
 * 
 * This script completely empties the storage by stopping the Storage Agent
 * and deleting the LanceDB data directory. Much faster than record-by-record deletion.
 */

const fs = require('fs').promises;
const path = require('path');
const axios = require('axios');

class CompleteStorageWiper {
  constructor() {
    this.storageUrl = process.env.STORAGE_URL || 'http://localhost:3015';
    this.dataPath = process.env.LANCEDB_PATH || './storage-agent/data/vectors';
    this.timeout = 10000;
  }

  async checkStorageAgent() {
    try {
      console.log('üîó Checking Storage Agent status...');
      const response = await axios.get(`${this.storageUrl}/health`, {
        timeout: this.timeout
      });
      
      if (response.data.status === 'healthy') {
        console.log('‚úÖ Storage Agent is running');
        return true;
      }
    } catch (error) {
      console.log('üìù Storage Agent is not running (this is expected for complete wipe)');
      return false;
    }
  }

  async getStorageStats() {
    try {
      const response = await axios.get(`${this.storageUrl}/api/stats`, {
        timeout: this.timeout
      });
      return response.data;
    } catch (error) {
      console.log('üìù Cannot get storage stats (Storage Agent may not be running)');
      return null;
    }
  }

  async stopStorageAgent() {
    try {
      console.log('üõë Attempting to gracefully stop Storage Agent...');
      // Try to send shutdown signal (this may not work via HTTP)
      // The user will need to manually stop it
      console.log('üí° Please manually stop the Storage Agent (Ctrl+C in its terminal)');
      console.log('‚è≥ Waiting 5 seconds for you to stop it...');
      
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // Check if it's actually stopped
      const isRunning = await this.checkStorageAgent();
      if (isRunning) {
        console.log('‚ö†Ô∏è  Storage Agent is still running. You may need to stop it manually.');
        console.log('üí° The directory wipe may fail if the database is still in use.');
        return false;
      } else {
        console.log('‚úÖ Storage Agent appears to be stopped');
        return true;
      }
    } catch (error) {
      console.log('üìù Could not verify Storage Agent status');
      return false;
    }
  }

  async wipeDataDirectory() {
    try {
      console.log(`üóëÔ∏è  Attempting to remove data directory: ${this.dataPath}`);
      
      // Check if directory exists
      try {
        await fs.access(this.dataPath);
        console.log('üìÅ Data directory found');
      } catch (error) {
        console.log('üìù Data directory does not exist - already clean');
        return { success: true, message: 'Already clean' };
      }

      // Remove the directory
      await fs.rm(this.dataPath, { recursive: true, force: true });
      console.log('‚úÖ Data directory removed successfully');

      // Recreate empty directory
      await fs.mkdir(this.dataPath, { recursive: true });
      console.log('üìÅ Created fresh empty data directory');

      return { success: true, message: 'Directory wiped successfully' };

    } catch (error) {
      console.error('‚ùå Failed to wipe data directory:', error.message);
      
      if (error.code === 'EBUSY' || error.code === 'ENOTEMPTY') {
        console.log('üí° Directory is in use. Make sure Storage Agent is completely stopped.');
        console.log('üí° On Windows, you may need to wait a moment after stopping the service.');
      }
      
      return { success: false, error: error.message };
    }
  }

  async performCompleteWipe() {
    try {
      console.log('üìä Checking current storage state...');
      
      // Get stats if possible
      const stats = await this.getStorageStats();
      if (stats && stats.success) {
        const totalCount = stats.stats.totalVectors;
        console.log(`üìà Found ${totalCount} records in storage`);
        
        if (totalCount === 0) {
          console.log('üìù Storage is already empty');
          return { success: true, message: 'Already empty' };
        }
      }

      // Stop Storage Agent (or ask user to stop it)
      await this.stopStorageAgent();

      // Wipe the data directory
      const wipeResult = await this.wipeDataDirectory();

      if (wipeResult.success) {
        console.log('\n‚úÖ Complete storage wipe successful!');
        console.log('üìù Storage is now completely empty');
        console.log('üîÑ You can now restart the Storage Agent');
        console.log('üí° Run: cd storage-agent && node server.js');
      } else {
        console.log('\n‚ùå Storage wipe failed');
        console.log(`üìä Error: ${wipeResult.error}`);
      }

      return wipeResult;

    } catch (error) {
      console.error('‚ùå Failed to perform complete wipe:', error.message);
      throw error;
    }
  }
}

// Main execution
async function main() {
  // Check for --force flag
  const args = process.argv.slice(2);
  const forceMode = args.includes('--force');
  
  console.log('üßπ COMPLETE AGENTIC MEMORY STORAGE WIPER');
  console.log('‚ïê'.repeat(80));
  console.log('‚ö†Ô∏è  WARNING: This will delete ALL records permanently!');
  console.log('üí° This method is faster than record-by-record deletion');
  console.log('‚ïê'.repeat(80));
  
  if (!forceMode) {
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    });

    const question = (prompt) => new Promise((resolve) => {
      readline.question(prompt, resolve);
    });

    const confirmAnswer = await question('\nü§î Completely wipe ALL storage? (yes/no): ');
    readline.close();
    
    if (confirmAnswer.toLowerCase() !== 'yes') {
      console.log('‚ùå Operation cancelled');
      process.exit(0);
    }
  }
  
  const wiper = new CompleteStorageWiper();
  
  try {
    const result = await wiper.performCompleteWipe();
    
    if (result.success) {
      console.log('\nüéâ Complete storage wipe finished successfully!');
      process.exit(0);
    } else {
      console.log('\n‚ùå Storage wipe failed');
      process.exit(1);
    }

  } catch (error) {
    console.error('\n‚ùå FATAL ERROR:', error.message);
    process.exit(1);
  }
}

// Handle graceful shutdown
process.on('SIGINT', async () => {
  console.log('\n\nüõë Received interrupt signal');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\n\nüõë Received termination signal');
  process.exit(0);
});

// Run the script
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Unhandled error:', error);
    process.exit(1);
  });
}

module.exports = CompleteStorageWiper;
#!/usr/bin/env node

/**
 * API-Based Storage Wiper for Agentic Memory
 * 
 * This script uses the Storage Agent's HTTP API to wipe all but one record,
 * avoiding direct LanceDB access and Windows native library issues.
 */

const axios = require('axios');

class APIStorageWiper {
  constructor() {
    this.storageUrl = process.env.STORAGE_URL || 'http://localhost:3015';
    this.timeout = 60000; // 60 second timeout for large operations
  }

  async checkStorageHealth() {
    try {
      console.log('üîó Checking Storage Agent connection...');
      const response = await axios.get(`${this.storageUrl}/health`, {
        timeout: this.timeout
      });
      
      if (response.data.status === 'healthy') {
        console.log('‚úÖ Storage Agent is running and healthy');
        return true;
      } else {
        console.log('‚ùå Storage Agent is not healthy');
        return false;
      }
    } catch (error) {
      console.error('‚ùå Cannot connect to Storage Agent:', error.message);
      console.log('üí° Make sure Storage Agent is running on port 3015');
      return false;
    }
  }

  async getStorageStats() {
    try {
      const response = await axios.get(`${this.storageUrl}/api/stats`, {
        timeout: this.timeout
      });
      return response.data;
    } catch (error) {
      console.error('‚ùå Failed to get storage stats:', error.message);
      throw error;
    }
  }

  async getAllVectors() {
    try {
      console.log('üìä Fetching all vectors from storage...');
      const response = await axios.get(`${this.storageUrl}/api/vectors?limit=10000`, {
        timeout: this.timeout
      });
      return response.data.vectors || [];
    } catch (error) {
      console.error('‚ùå Failed to get vectors:', error.message);
      throw error;
    }
  }

  async deleteVector(vectorId) {
    try {
      const response = await axios.delete(`${this.storageUrl}/api/vector/${vectorId}`, {
        timeout: this.timeout
      });
      return response.data.success;
    } catch (error) {
      console.error(`‚ùå Failed to delete vector ${vectorId}:`, error.message);
      return false;
    }
  }

  async deleteBulkVectors(vectorIds) {
    try {
      // For large datasets, break into smaller batches
      const batchSize = 100; // Process 100 records at a time
      let totalDeleted = 0;
      let totalFailed = 0;
      const allFailedIds = [];

      console.log(`üì¶ Processing ${vectorIds.length} deletions in batches of ${batchSize}...`);

      for (let i = 0; i < vectorIds.length; i += batchSize) {
        const batch = vectorIds.slice(i, i + batchSize);
        const batchNumber = Math.floor(i / batchSize) + 1;
        const totalBatches = Math.ceil(vectorIds.length / batchSize);

        console.log(`   üîÑ Processing batch ${batchNumber}/${totalBatches} (${batch.length} records)...`);

        try {
          const response = await axios.post(`${this.storageUrl}/api/vectors/delete-bulk`, {
            vectorIds: batch
          }, {
            timeout: this.timeout
          });

          if (response.data) {
            totalDeleted += response.data.deletedCount || 0;
            totalFailed += response.data.failedCount || 0;
            if (response.data.failedIds) {
              allFailedIds.push(...response.data.failedIds);
            }
            console.log(`   ‚úÖ Batch ${batchNumber}: ${response.data.deletedCount || 0} deleted, ${response.data.failedCount || 0} failed`);
          }
        } catch (batchError) {
          console.error(`   ‚ùå Batch ${batchNumber} failed:`, batchError.message);
          totalFailed += batch.length;
          allFailedIds.push(...batch);
        }

        // Small delay between batches to avoid overwhelming the server
        if (i + batchSize < vectorIds.length) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }

      return {
        deletedCount: totalDeleted,
        failedCount: totalFailed,
        failedIds: allFailedIds
      };
    } catch (error) {
      console.error(`‚ùå Failed to delete vectors in bulk:`, error.message);
      return { deletedCount: 0, failedCount: vectorIds.length, failedIds: vectorIds };
    }
  }

  async wipeAllButMostRecent() {
    try {
      console.log('üìä Analyzing current storage...');
      
      const stats = await this.getStorageStats();
      
      if (!stats.success) {
        console.log('‚ùå Failed to get storage statistics');
        return { success: false, message: 'Failed to get stats' };
      }

      const totalCount = stats.stats.totalVectors;

      if (totalCount === 0) {
        console.log('üìù Storage is already empty - nothing to wipe');
        return { success: true, message: 'Already empty' };
      }

      if (totalCount === 1) {
        console.log('üìù Storage already has only one record - nothing to wipe');
        return { success: true, message: 'Already minimal' };
      }

      console.log(`üìà Found ${totalCount} records in storage`);
      
      // Get all vectors to analyze
      const allVectors = await this.getAllVectors();
      
      if (allVectors.length === 0) {
        console.log('üìù No vectors returned from API');
        return { success: false, message: 'No vectors accessible' };
      }

      // Sort by timestamp to find most recent
      const sortedVectors = allVectors.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
      const mostRecentRecord = sortedVectors[0];
      const recordsToDelete = sortedVectors.slice(1);

      console.log(`\nüìã MOST RECENT RECORD (TO KEEP):`);
      console.log(`   ID: ${mostRecentRecord.id}`);
      console.log(`   Instrument: ${mostRecentRecord.instrument || 'N/A'}`);
      console.log(`   Entry Type: ${mostRecentRecord.entryType || 'N/A'}`);
      console.log(`   PnL: $${(mostRecentRecord.pnl || 0).toFixed(2)}`);
      console.log(`   Date: ${new Date(mostRecentRecord.timestamp).toLocaleString()}`);

      console.log(`\nüìã RECORDS TO DELETE (${recordsToDelete.length}):`);
      recordsToDelete.slice(0, 10).forEach((record, index) => {
        console.log(`   ${index + 1}. ${record.id.substring(0, 30)}... (${new Date(record.timestamp).toLocaleDateString()})`);
      });
      
      if (recordsToDelete.length > 10) {
        console.log(`   ... and ${recordsToDelete.length - 10} more records`);
      }

      // Extract IDs of records to delete
      const idsToDelete = recordsToDelete.map(record => record.id);

      console.log(`\n‚ö†Ô∏è  READY TO DELETE ${idsToDelete.length} RECORDS`);
      console.log(`üìù This will keep only: ${mostRecentRecord.id}`);
      
      // Add confirmation for large datasets
      if (idsToDelete.length > 100) {
        const readline = require('readline').createInterface({
          input: process.stdin,
          output: process.stdout
        });

        const question = (prompt) => new Promise((resolve) => {
          readline.question(prompt, resolve);
        });

        const confirmAnswer = await question(`ü§î Delete ${idsToDelete.length} records? This may take several minutes. Continue? (yes/no): `);
        readline.close();
        
        if (confirmAnswer.toLowerCase() !== 'yes') {
          console.log('‚ùå Operation cancelled');
          return { success: false, message: 'Cancelled by user' };
        }
      }

      console.log(`\nüóëÔ∏è  Deleting ${idsToDelete.length} records using bulk delete API...`);

      // Perform bulk deletion
      const deleteResult = await this.deleteBulkVectors(idsToDelete);

      if (deleteResult.deletedCount > 0) {
        console.log(`‚úÖ Successfully deleted ${deleteResult.deletedCount} records`);
      }

      if (deleteResult.failedCount > 0) {
        console.log(`‚ùå Failed to delete ${deleteResult.failedCount} records`);
        if (deleteResult.failedIds && deleteResult.failedIds.length > 0) {
          console.log(`üí° Failed IDs: ${deleteResult.failedIds.slice(0, 5).join(', ')}${deleteResult.failedIds.length > 5 ? '...' : ''}`);
        }
      }

      // Verify final count
      const finalStats = await this.getStorageStats();
      const finalCount = finalStats.success ? finalStats.stats.totalVectors : 'Unknown';

      return {
        success: deleteResult.deletedCount > 0,
        message: `Deleted ${deleteResult.deletedCount} records, ${deleteResult.failedCount} failed`,
        recordsFound: totalCount,
        recordsDeleted: deleteResult.deletedCount,
        recordsFailed: deleteResult.failedCount,
        finalCount: finalCount,
        mostRecentRecord: mostRecentRecord.id
      };

    } catch (error) {
      console.error('‚ùå Failed to wipe storage:', error.message);
      throw error;
    }
  }
}

// Main execution
async function main() {
  console.log('üßπ API-BASED AGENTIC MEMORY STORAGE WIPER');
  console.log('‚ïê'.repeat(80));
  console.log('üí° This version uses the Storage Agent HTTP API');
  console.log('‚ïê'.repeat(80));
  
  const wiper = new APIStorageWiper();
  
  try {
    const isHealthy = await wiper.checkStorageHealth();
    if (!isHealthy) {
      console.log('‚ùå Cannot proceed without Storage Agent connection');
      process.exit(1);
    }

    const result = await wiper.wipeAllButMostRecent();
    
    if (result.success) {
      console.log('\n‚úÖ Storage wipe completed successfully');
      console.log(`üìä Result: ${result.message}`);
      console.log(`üìà Records found: ${result.recordsFound}`);
      console.log(`üóëÔ∏è  Records deleted: ${result.recordsDeleted}`);
      console.log(`üìù Final storage count: ${result.finalCount}`);
      console.log(`üíæ Kept record: ${result.mostRecentRecord}`);
    } else {
      console.log('\n‚ö†Ô∏è  Storage wipe completed with issues');
      console.log(`üìä Result: ${result.message}`);
      if (result.recordsDeleted > 0) {
        console.log(`üóëÔ∏è  Some records were deleted: ${result.recordsDeleted}`);
      }
      if (result.recordsFailed > 0) {
        console.log(`‚ùå Some deletions failed: ${result.recordsFailed}`);
      }
    }

  } catch (error) {
    console.error('\n‚ùå FATAL ERROR:', error.message);
    process.exit(1);
  }
}

// Handle graceful shutdown
process.on('SIGINT', async () => {
  console.log('\n\nüõë Received interrupt signal');
  process.exit(0);
});

process.on('SIGTERM', async () => {
  console.log('\n\nüõë Received termination signal');
  process.exit(0);
});

// Run the script
if (require.main === module) {
  main().catch(error => {
    console.error('‚ùå Unhandled error:', error);
    process.exit(1);
  });
}

module.exports = APIStorageWiper;
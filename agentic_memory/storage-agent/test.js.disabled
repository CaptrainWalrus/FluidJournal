/**
 * Simple test for Storage Agent
 * Tests LanceDB integration and vector storage
 */

const vectorStore = require('./src/vectorStore');

async function runTests() {
  console.log('üß™ Starting Storage Agent tests...\n');

  try {
    // Test 1: Initialize vector store
    console.log('Test 1: Initializing LanceDB vector store...');
    await vectorStore.initialize();
    console.log('‚úÖ Vector store initialized successfully\n');

    // Test 2: Store a sample vector
    console.log('Test 2: Storing sample vector...');
    const sampleVector = {
      entrySignalId: 'test_signal_001',
      instrument: 'MGC',
      timestamp: Date.now(),
      entryType: 'ORDER_FLOW_IMBALANCE',
      features: new Float32Array([
        0.1, 0.2, 0.3, 0.4, 0.5,  // First 5 features
        0.6, 0.7, 0.8, 0.9, 1.0,  // Next 5 features  
        1.1, 1.2, 1.3, 1.4, 1.5,  // Next 5 features
        1.6, 1.7, 1.8, 1.9, 2.0   // Last 5 features (20 total)
      ]),
      riskUsed: {
        stopLoss: 15.0,
        takeProfit: 25.0,
        virtualStop: 20.0
      },
      outcome: {
        pnl: 250.0,
        pnlPoints: 12.5,
        holdingBars: 8,
        exitReason: 'take_profit',
        maxProfit: 15.0,
        maxLoss: -5.0,
        wasGoodExit: true
      }
    };

    const vectorId = await vectorStore.storeVector(sampleVector);
    console.log(`‚úÖ Vector stored with ID: ${vectorId}\n`);

    // Test 3: Query vectors
    console.log('Test 3: Querying stored vectors...');
    const vectors = await vectorStore.getVectors({
      instrument: 'MGC',
      limit: 10
    });
    console.log(`‚úÖ Retrieved ${vectors.length} vectors\n`);

    // Test 4: Similar vector search
    console.log('Test 4: Testing similarity search...');
    const queryFeatures = new Float32Array([
      0.1, 0.2, 0.3, 0.4, 0.5,
      0.6, 0.7, 0.8, 0.9, 1.0,
      1.1, 1.2, 1.3, 1.4, 1.5,
      1.6, 1.7, 1.8, 1.9, 2.0
    ]);
    
    const similarVectors = await vectorStore.findSimilarVectors(queryFeatures, {
      entryType: 'ORDER_FLOW_IMBALANCE',
      limit: 5,
      similarity_threshold: 0.9 // Very similar vectors (should match our test data)
    });
    console.log(`‚úÖ Found ${similarVectors.length} similar vectors\n`);

    // Test 5: Get statistics
    console.log('Test 5: Getting storage statistics...');
    const stats = await vectorStore.getStats();
    console.log('‚úÖ Storage statistics:', {
      totalVectors: stats.totalVectors,
      featureCount: stats.featureCount,
      instruments: Object.keys(stats.instrumentCounts)
    });
    console.log('');

    // Clean up
    console.log('Test 6: Cleanup...');
    await vectorStore.close();
    console.log('‚úÖ Vector store closed\n');

    console.log('üéâ All tests passed! Storage Agent is ready for integration.');
    process.exit(0);

  } catch (error) {
    console.error('‚ùå Test failed:', error);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

// Handle graceful shutdown
process.on('SIGINT', async () => {
  console.log('\n‚èπÔ∏è  Test interrupted, cleaning up...');
  await vectorStore.close();
  process.exit(0);
});

// Run tests
runTests();